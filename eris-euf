#!/usr/bin/env python3

from flask import Flask, json, request, jsonify, redirect, url_for
from werkzeug.serving import make_server
import sys
from os import listdir
from os.path import join, dirname, abspath, isdir
from threading import Thread, Lock, Event
from argparse import ArgumentParser
import time
from collections import namedtuple
import logging
from datetime import datetime

from util import pretty_print
from util.curses import Curses
from util.plotting import AsciiPlot
from util.rapl import RAPLCounter


def add_third_party_dir(f):
    base_path = dirname(abspath(f))
    tp_dir = join(base_path, "third_party")

    for e in listdir(tp_dir):
        if isdir(join(tp_dir, e)):
            sys.path.append(join(tp_dir, e))

add_third_party_dir(__file__)
from eris import ErisCtrl, ErisCtrlError
from pareto import paretoOptimize

try:
    from eris_model import Eris
    from hardware_model import Hardware
except ImportError:
    print("Model files are missing. Abort", file=sys.stderr)
    sys.exit(1)



# All the REST API stuff
app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return redirect(url_for("service_status"))

@app.route("/configurations", methods=["GET"])
def configurations():
    global euf_mgr

    configs, active_config = euf_mgr.get_configurations()

    json_configs = []

    max_freq = max(Hardware.config["freq"])
    min_freq = min(Hardware.config["freq"])

    max_ee = 0
    max_tps = 0
    for c in configs:
        ee = 1/c.epr

        data = {}
        data["cpuCount"] = c.cpus
        data["avgCoreFrequency"] = c.freq
        data["avgCoreFrequencyLevel"] = (c.freq - min_freq) / (max_freq - min_freq) * 100
        data["uncoreFrequency"] = 2400000
        data["uncoreFreqeuncyLevel"] = 100
        data["relativePerformance"] = c.tps
        data["relativeEE"] = ee
        data["active"] = False if active_config is None else c == active_config

        json_configs.append(data)

        if ee > max_ee:
            max_ee = ee
        if c.tps > max_tps:
            max_tps = c.tps

    for jc in json_configs:
        jc["relativePerformance"] = jc["relativePerformance"] / max_tps * 100
        jc["relativeEE"] = jc["relativeEE"] / max_ee * 100

    return jsonify({"sockets" : [{
            "logicalId" : 0,
            "configurations" : json_configs,
            "adapting" : False,
            "reevalLeft" : 0
        }]})

@app.route("/servicestatus", methods=["GET"])
def service_status():
    global euf_mgr

    euf_on = euf_mgr.euf()
    return jsonify({"adaptOn" : False, "eclOn" : euf_on})

@app.route("/services/<stype>/<status>", methods=["POST"])
def services(stype, status):
    global euf_mgr

    if stype == "adapton":
        pass
    elif stype == "eclon":
        if int(status) == 1:
            euf_mgr.euf_on()
        else:
            euf_mgr.euf_off()
    else:
        return '',400

    return '',200

@app.route("/benchmark/sessions")
def sessions():
    return jsonify({"managedBenchmarks" : [ { "name" : "sigmod-demo" } ]})

@app.route("/benchmark/setbenchmark/<session>/<bench>", methods=["POST"])
def set_benchmark(session, bench):
    global euf_mgr

    success = euf_mgr.set_benchmark(bench)

    return '', 200 if success else 400

@app.route("/benchmark/setprofile/<session>/<profile>", methods=["POST"])
def set_profile(session, profile):
    success = euf_mgr.set_profile(profile)

    return '', 200 if success else 400

class FlaskThread(Thread):
    def __init__(self, app, euf):
        super().__init__()

        # Disable flask logging completely
        logging.getLogger('werkzeug').setLevel(logging.ERROR)

        # Create the flask server using werkzeug
        self._server = make_server("localhost", 5000, app)
        self._ctx = app.app_context()
        self._ctx.push()

        # Save the EUF thread in the global context so that we can access it from
        # inside the requests
        global euf_mgr
        euf_mgr = euf

    def run(self):
        self._server.serve_forever()

    def shutdown(self):
        self._ctx.pop()
        self._server.shutdown()


class EUFThread(Thread):
    class Config(namedtuple("Config", ["freq", "cores", "ht", "cpus", "ipc", "power", "tps", "epr"])):
        __slots__ = ()

        def __eq__(self, other):
            if self is None or other is None:
                return False

            return self.freq == other.freq and self.cores == other.cores and self.ht == other.ht

    def __init__(self, ectrl, curses, event):
        super().__init__()

        # Various cosmetic settings
        self._history_length = 300
        self._refresh_time = 1000

        self._ectrl = ectrl
        self._lock = Lock()
        self.eufon = True

        self._loglines = []

        self._curses = curses
        self._setup_curses()
        self._setup_plots()

        self._event = event

        # Our internal monitoring data
        self._last_refresh = None
        try:
            self._rapl_counters = RAPLCounter()
        except ValueError:
            self._rapl_counters = None

        self._monitoring_data = {
            "power" : [],
            "performance" : []
        }

        # Register the ERIS performance counters
        self._counters = {}
        for ctr in ectrl.counters():
            if ctr.dist_name == "Tasks.Started":
                self._counters["started"] = ctr.monitor()
            if ctr.dist_name == "Tasks.Active":
                self._counters["active"] = ctr.monitor()
            elif ctr.dist_name == "Tasks.Finished":
                self._counters["finished"] = ctr.monitor()
            elif ctr.dist_name == "Tasks.Latency Average":
                self._counters["latency"] = ctr.monitor()

        # Get all the workers
        self.workers = ectrl.workers()

        # Get the demo session
        self.session = ectrl.session("demo-sigmod")

        self._log("Available benchmarks:")
        for n, b in self.session.benchmarks.items():
            self._log("{}: {}".format(n, b.name))

        self._log("Available profiles:")
        for n, p in self.session.profiles.items():
            self._log("{}: {}".format(n, p.name))

        # Internal management data
        self._update = True
        self._state = None

        self._all_configurations = None
        self._configurations = None
        self._active_configuration = None

        self._benchmark_configurations = {}
        self._pregenerate_configurations()

    # Other support functions
    def get_configurations(self):
        with self._lock:
            return self._configurations, self._active_configuration

    def set_benchmark(self, bench_id):
        with self._lock:
            return self.session._activate_benchmark(bench_id)

    def set_profile(self, profile_id):
        with self._lock:
            return self.session._activate_profile(profile_id)

    def euf_on(self):
        with self._lock:
            self.eufon = True
            self._update = True

    def euf_off(self):
        with self._lock:
            self.eufon = False
            self._update = True

    def euf(self):
        with self._lock:
            return self.eufon

    # Output related functions
    def _setup_curses(self):
        if self._curses is None:
            return

        self._root_win = self._curses.root_window()

        self._show_stats = self._show_config = self._show_plots \
                = self._show_log = True

        # Create the windows and resize them to an appropriate size
        self._stats_win = self._root_win.new_window(0,0,1,1)
        self._config_win = self._root_win.new_window(0,0,1,1)
        self._power_plot_win = self._root_win.new_window(0,0,1,1)
        self._perf_plot_win = self._root_win.new_window(0,0,1,1)
        self._config_plot_win = self._root_win.new_window(0,0,1,1)
        self._log_win = self._root_win.new_window(0,0,1,1)

        self._resize_windows(refresh=False)

    def _setup_plots(self):
        if self._curses is None:
            return

        def data_plot(title):
            p = AsciiPlot(10, 10)
            p.set("xrange", "[-{}:0]".format(self._history_length))
            p.set("border", "3")
            p.set("xtics", "border", "out", "nomirror", "scale 1",
                    "(" + ",".join(["'{:d} min' {}".format(int(i/60), -i) for i in range(0, self._history_length + 1, 60)]) + ")")
            p.set("ytics", "border", "out", "nomirror", "scale 0.5")
            p.set("key", "center", "top")
            p.set("title", "'{}'".format(title))

            return p

        def config_plot():
            p = AsciiPlot(10, 10)
            p.set("xrange", "[0:100]").set("yrange", "[0:100]")
            p.unset("border").unset("tics").unset("key")
            p.set("title", "'Configurations'")

            return p

        self._power_plot = data_plot("Power")
        self._perf_plot = data_plot("Performance")
        self._config_plot = config_plot()

    def _resize_windows(self, refresh=True):
        if self._curses is None:
            return

        width, height = self._root_win.dimension

        # We want to have the following layout if there is enough space:
        #
        # |-------------------------------------------------------------|
        # |  Current statistics                                         |
        # |-------------------------------------------------------------|
        # |  Current active configuration                               |
        # |-------------------------------------------------------------|
        # |                     |                  |                    |
        # |         Plot        |       Plot       |        Plot        |
        # |    Configurations   |     Power vs.    |   Performance vs.  |
        # |    + act. Config    |    est. Power    |     est. Perf      |
        # |                     |                  |                    |
        # |-------------------------------------------------------------|
        # | Log                                                         |
        # |                                                             |
        # |                                                             |
        # |-------------------------------------------------------------|
        #
        # If we don't have enough width we omit the config plot and if necessary
        # also the performance plot. If width is really short, we only show the
        # values of the achieved and estimated performance.
        # If we don't have enough height, we omit the plots and instead also only
        # show the achieved and estimated values. If height is really short, we
        # omit the log area in favor of the performance and power values.
        # The minimum that we will show is the current configuration.

        self._show_stats = self._show_config = self._show_plots \
                = self._show_log = True

        if height >= 40 and width >= 60:
            # we have enough space for everything
            self._stats_win.resize(width, 1).move(0, 0)
            self._config_win.resize(width, 1).move(0, 1)

            self._config_plot_win.resize(width/3,height-20).move(0, 2)
            self._power_plot_win.resize(width/3,height-20).move(width/3, 2)
            self._perf_plot_win.resize(width/3,height-20).move(2*width/3, 2)
            self._config_plot_size = self._power_plot_size = \
                    self._perf_plot_size = (width/3, height-20)

            self._log_win.resize(width, 18).move(0, height-18)
        elif height >= 40 and width < 60 and width > 40:
            # Not enough width for the config plot so omit this one
            self._stats_win.resize(width, 1).move(0, 0)
            self._config_win.resize(width, 1).move(0, 1)

            self._config_plot_win.resize(1, 1).move(0, 0)
            self._config_plot_size = None

            self._power_plot_win.resize(width/2, height-20).move(0, 2)
            self._perf_plot_win.resize(width/2, height-20).move(width/2, 2)
            self._power_plot_size = self._perf_plot_size = (width/2, height-20)

            self._log_win.resize(width, 18).move(0, height-18)
        elif height >= 40 and width < 40 and width > 20:
            # Not enough width for the config and performance plot, so omit them
            # and instead only show the achieved and estimated performance values
            self._stats_win.resize(width, 1).move(0, 0)
            self._config_win.resize(width, 1).move(0, 1)

            self._config_plot_win.resize(1, 1).move(0, 0)
            self._config_plot_size = None

            self._power_plot_win.resize(width-10, height-20).move(0, 2)
            self._power_plot_size = (width-10, height-20)

            self._perf_plot_win.resize(10, height-20).move(width-10, 2)
            self._perf_plot_size = None

            self._log_win.resize(width, 18).move(0, height-18)
        elif height >= 40 and width <= 20:
            # Not enough width for any of the plots, just display the values
            self._stats_win.resize(width, 1).move(0, 0)
            self._config_win.resize(width, 1).move(0, 1)

            self._config_plot_win.resize(1, 1).move(0, 0)
            self._config_plot_size = None

            self._power_plot_win.resize(width, 5).move(0, 2)
            self._perf_plot_win.resize(width, 5).move(0, 7)
            self._power_plot_size = self._perf_plot_size = None

            self._log_win.resize(width, height-12).move(0, 12)
        elif height < 40 and height >= 20:
            # Not enough height to show the plots, just show the values
            self._stats_win.resize(width, 1).move(0, 0)
            self._config_win.resize(width, 1).move(0, 1)

            self._config_plot_win.resize(1, 1).move(0, 0)
            self._config_plot_size = None

            self._power_plot_win.resize(width, 5).move(0, 2)
            self._perf_plot_win.resize(width, 5).move(0, 7)
            self._power_plot_size = self._perf_plot_size = None

            self._log_win.resize(width, height-12).move(0, 12)
        elif height < 20 and height >= 8:
            # Even less height, don't show the log anymore in favor of the power and performance values
            self._stats_win.resize(width, 1).move(0, 0)
            self._config_win.resize(width, 1).move(0, 1)

            self._config_plot_win.resize(1, 1).move(0, 0)
            self._config_plot_size = None

            self._power_plot_win.resize(width, 3).move(0, 2)
            self._perf_plot_win.resize(width, 3).move(0, 5)
            self._power_plot_size = self._perf_plot_size = None

            self._show_log = False
            self._log_win.resize(1, 1).move(0, 0)
        elif height < 8 and height >= 2:
            # Even less height, only show the statistics and the currently used configuration
            self._stats_win.resize(width, 1).move(0, 0)
            self._config_win.resize(width, 1).move(0, 1)

            self._show_plots = False
            self._config_plot_win.resize(1, 1).move(0, 0)
            self._power_plot_win.resize(1, 1).move(0, 0)
            self._perf_plot_win.resize(1, 1).move(0, 0)
            self._config_plot_size = self._power_plot_size = \
                    self._perf_plot_size = None

            self._show_log = False
            self._log_win.resize(1, 1).move(0, 0)
        elif height == 1:
            # We only have one line left, hence only show the currently used configuration
            self._config_win.resize(width, 1).move(0, 0)

            self._show_stats = False
            self._stats_win.resize(1, 1).move(0, 0)

            self._show_plots = False
            self._config_plot_win.resize(1, 1).move(0, 0)
            self._power_plot_win.resize(1, 1).move(0, 0)
            self._perf_plot_win.resize(1, 1).move(0, 0)
            self._config_plot_size = self._power_plot_size = \
                    self._perf_plot_size = None

            self._show_log = False
            self._log_win.resize(1, 1).move(0, 0)

        if refresh:
            self._refresh()

    def _refresh_stats(self):
        if not self._show_stats:
            return

        # Output the counters
        ctr_values = []
        for name, ctr in self._counters.items():
            vals = ctr.values(False)
            if len(vals) > 0:
                ctr_values.append((name, vals[-1].value))

        self._stats_win.clear(refresh=False)
        self._stats_win.print(" ".join(["{}: {}".format(n, v) for n, v in ctr_values]), pos=(0,0), refresh=False)

    def _refresh_config(self):
        if not self._show_config:
            return

        self._config_win.clear(refresh=False)

        config = self._active_configuration
        if config is None:
            self._config_win.print("Active configuration: None", pos=(0,0), refresh=False)
        else:
            workers = []
            for i in range(config.cores):
                workers.append(i)
            if config.ht:
                for i in range(config.cores):
                    workers.append(i + max(Hardware.config['cores']))

            frequency = config.freq
            power = config.power
            tps = config.tps

            self._config_win.print("Active configuration: {} @{}MHz [{:.2f} W, {:d} T/s]".format(pretty_print(workers), frequency/1000, power, int(tps)),
                    pos=(0,0), refresh=False)

    def _prepare_plot_data(self, mon_data, rel_ts=None):
        if rel_ts is None:
            rel_ts = datetime.now()

        plot_data = []
        for ts, act, est in reversed(mon_data):
            t_diff = (ts - rel_ts).total_seconds()
            if t_diff > 0:
                continue

            if t_diff < -self._history_length:
                break

            plot_data.append([t_diff, act, est])

        return plot_data

    def _refresh_power_plot(self):
        self._power_plot_win.clear(refresh=False)

        if self._power_plot_size is None:
            if len(self._monitoring_data["power"]) == 0:
                return

            latest_value = self._monitoring_data["power"][-1]
            self._power_plot_win.print("Power", pos=(0,0), refresh=False)
            self._power_plot_win.print("Cur: {:.2f} W".format(latest_value[1]), pos=(0,1), refresh=False)
            self._power_plot_win.print("Est: {:.2f} W".format(latest_value[2]), pos=(0,2), refresh=False)
        else:
            width, height = self._power_plot_size
            self._power_plot.resize(width-1, height-1)

            data = self._prepare_plot_data(self._monitoring_data["power"])
            if len(data) == 0:
                return

            self._power_plot_win.safe_print(
                    self._power_plot.plot_data(data, "'$data' using 1:2 title 'real' with lines lc rgb 'green'",
                                                     "'' using 1:3 title 'estimated' with lines lc rgb 'red'"),
                    pos=(0,0), refresh=False)

    def _refresh_perf_plot(self):
        self._perf_plot_win.clear(refresh=False)

        if self._perf_plot_size is None:
            if len(self._monitoring_data["performance"]) == 0:
                return

            latest_value = self._monitoring_data["performance"][-1]
            self._perf_plot_win.print("Performance", pos=(0,0), refresh=False)
            self._perf_plot_win.print("Cur: {:d} T/s".format(int(latest_value[1])), pos=(0,1), refresh=False)
            self._perf_plot_win.print("Est: {:d} T/s".format(int(latest_value[2])), pos=(0,2), refresh=False)
        else:
            width, height = self._perf_plot_size
            self._perf_plot.resize(width-1, height-1)

            data = self._prepare_plot_data(self._monitoring_data["performance"])
            if len(data) == 0:
                return

            self._perf_plot_win.safe_print(
                    self._perf_plot.plot_data(data, "'$data' using 1:2 title 'real' with lines lc rgb 'green'",
                                                     "'' using 1:3 title 'estimated' with lines lc rgb 'red'"),
                    pos=(0,0), refresh=False)

    def _prepare_config_data(self, all_configs, pareto_configs, active_config):
        max_tps = max([c.tps for c in all_configs])
        min_tps = min([c.tps for c in all_configs])
        max_power = max([c.power for c in all_configs])
        min_power = min([c.power for c in all_configs])

        if max_tps == min_tps:
            min_tps = 0
        if max_power == min_power:
            min_power = 0

        all_cfgs = [[(c.tps - min_tps) / (max_tps - min_tps) * 100,
                     (c.power - min_power) / (max_power - min_power) * 100] for c in all_configs]
        pareto_cfgs = [[(c.tps - min_tps) / (max_tps - min_tps) * 100,
                        (c.power - min_power) / (max_power - min_power) * 100] for c in pareto_configs]
        active_cfg = [[(active_config.tps - min_tps) / (max_tps - min_tps) * 100,
                       (active_config.power - min_power) / (max_power - min_power) * 100]]

        return all_cfgs, pareto_cfgs, active_cfg

    def _refresh_config_plot(self):
        if self._config_plot_size is None:
            return

        if self._active_configuration is None:
            return

        self._config_plot_win.clear(refresh=False)
        width, height = self._config_plot_size
        self._config_plot.resize(width-1, height-1)

        all_cfgs, pareto, active = self._prepare_config_data(
                self._all_configurations,
                self._configurations,
                self._active_configuration)

        self._config_plot_win.safe_print(
                self._config_plot.plot_data({"all" : all_cfgs, "pareto" : pareto, "active" : active},
                                            "'$all' with points pt '*' tc rgb 'grey'",
                                            "'$pareto' with points pt '*' tc rgb 'green'",
                                            "'$active' with points pt 'O' tc rgb 'red'"),
                pos=(0,0), refresh=False)

    def _refresh_plots(self):
        if not self._show_plots:
            return

        self._refresh_config_plot()
        self._refresh_power_plot()
        self._refresh_perf_plot()

    def _refresh_log(self):
        if not self._show_log:
            return

        maxlines = self._log_win.dimension[1]
        self._log_win.clear(refresh=False)
        self._log_win.print("\n".join(self._loglines[-maxlines:]), pos=(0,0), refresh=False)

    def _refresh(self):
        if self._curses is None:
            return

        # First update the window contents
        self._refresh_stats()
        self._refresh_config()
        self._refresh_plots()
        self._refresh_log()

        # Now make a coordinated refresh of everything
        self._root_win.refresh()
        if self._show_stats: self._stats_win.refresh()
        if self._show_config: self._config_win.refresh()
        if self._show_plots:
            self._config_plot_win.refresh()
            self._perf_plot_win.refresh()
            self._power_plot_win.refresh()
        if self._show_log: self._log_win.refresh()

    def _log(self, string):
        self._loglines.append(string)

        if self._curses is None:
            print(string)
            return

    # EUF related functions
    def _benchmark_states(self, benchmark_session):
        state = {}
        for n, b in benchmark_session.benchmarks.items():
            state[n] = (b.state(False), b.active(False))

        return state

    def _bench_changed(self):
        self.session._update()
        old_state = self._state
        self._state = self._benchmark_states(self.session)


        if old_state is None:
            return True

        changed = False
        for b in self._state:
            os, oa = old_state[b]
            ns, na = self._state[b]

            if os != ns:
                self._log("State changed for {}: {} to {}".format(b, os, ns))
                changed = True
            elif oa != na:
                self._log("Active changed for {}: {} to {}".format(b, oa, na))
                changed = True

        return changed

    def _bench_running(self):
        for b in self._state:
            s, _ = self._state[b]

            if s == "Running":
                return (True, self.session.benchmarks[b])

        return (False, None)

    def _bench_loading(self):
        for b in self._state:
            s, _ = self._state[b]

            if s == "Loading":
                return (True, self.session.benchmarks[b])

        return (False, None)

    def _need_adaptation(self):
        if self._active_configuration is None:
            return False, None
        if len(self._configurations) == 1:
            return False, None

        started_ctr = self._counters["started"].values(False)
        active_ctr = self._counters["active"].values(False)
        if len(started_ctr) == 0 or len(active_ctr) == 0:
            return False, None

        started = started_ctr[-1].value
        active = active_ctr[-1].value
        if started > active:
            needed_tps = started
        else:
            needed_tps = active
        available_tps = self._active_configuration.tps

        if abs(needed_tps - available_tps) > (needed_tps * 0.05):
            self._log("Need adaptation: {} requested T/s vs {} provided T/s".format(needed_tps, available_tps))
            return True, needed_tps

        return False, None

    def _pregenerate_configurations(self):
        for n in self.session.benchmarks:
            b = self.session.benchmarks[n]

            if b.name in self._benchmark_configurations:
                continue

            self._log("Generating configurations for {}".format(b.name))

            # Generate all possible configurations based on the models
            all_configurations = []
            for freq in Hardware.config['freq']:
                for cores in Hardware.config['cores']:
                    for ht in Hardware.config['ht']:
                        cpus = (ht+1)*cores
                        params = Eris(cpus, ht).benchmarks(b.name)
                        ipc = Hardware.IPC(
                                memory_heaviness=params["memory_heaviness"](),avx_heaviness=params["avx_heaviness"](), branch_heaviness=params["branch_heaviness"](),
                                compute_heaviness=params["compute_heaviness"](),cache_heaviness=params["cache_heaviness"](),
                                cpus=cpus,freq=freq,ht=ht)
                        p_pkg = Hardware.P_PKG(
                                memory_heaviness=params["memory_heaviness"](),avx_heaviness=params["avx_heaviness"](),compute_heaviness=params["compute_heaviness"](),
                                IPC=ipc,freq=freq,cpus=cpus,ht=ht)
                        p_core = Hardware.P_Cores(
                                nomemory_heaviness=params["nomemory_heaviness"](),avx_heaviness=params["avx_heaviness"](),compute_heaviness=params["compute_heaviness"](),
                                IPC=ipc,freq=freq,cpus=cpus,ht=ht)
                        p_ram = Hardware.P_Ram(memory_heaviness=params["memory_heaviness"](),
                                IPC=ipc,freq=freq,cpus=cpus,ht=ht)
                        tps = (freq*1000)/(params["ipt"]()/ipc)

                        power = p_pkg + p_ram
                        epr = power/tps

                        all_configurations.append(EUFThread.Config(freq=freq, cores=cores, ht=True if ht == 1 else False,
                                                                   cpus=cpus, ipc=ipc, power=power, tps=tps, epr=epr))

            # Reduce the number of configurations to the pareto optimal ones
            pareto_configurations =  [EUFThread.Config(**pc) for pc in paretoOptimize([c._asdict() for c in all_configurations], ["<power", ">tps"])]
            self._log("Generated {} configurations, of which {} are pareto optimal".format(len(all_configurations), len(pareto_configurations)))

            # Save the configurations in our internal buffer
            self._benchmark_configurations[b.name] = {"all": all_configurations, "pareto": pareto_configurations}

    def _update_configurations(self):
        self._configurations = []
        if not self.eufon:
            self._log("EUF disabled - using max performance configuration")

            freq = max(Hardware.config["freq"])
            cores = max(Hardware.config["cores"])

            self._configurations.append(EUFThread.Config(freq=freq,
                                                         cores=cores,
                                                         ht=True,
                                                         cpus=2*cores,
                                                         ipc=1, power=1, tps=1, epr=1))
        else:
            loading, b = self._bench_loading()
            if loading:
                self._log("{} is currently loading - using max performance configuration".format(b.name))

                freq = max(Hardware.config["freq"])
                cores = max(Hardware.config["cores"])

                self._configurations.append(EUFThread.Config(freq=freq,
                                                             cores=cores,
                                                             ht=True,
                                                             cpus=2*cores,
                                                             ipc=1, power=1, tps=1, epr=1))
                self._all_configurations = self._configurations

                return

            running, b = self._bench_running()
            if not running:
                self._log("No benchmark running")
                # Add a minimal configuration that we use when nothing is running and no
                # tasks are outstanding.
                self._configurations.append(EUFThread.Config(freq=min(Hardware.config["freq"]),
                                                             cores=min(Hardware.config["cores"]),
                                                             ht=False,
                                                             cpus=min(Hardware.config["cores"]),
                                                             ipc=1, power=1, tps=1, epr=1))

                # Also add the last active configuration if there is one and if its not
                # already the idle config. We can use this configuration if there are
                # still requests outstanding.
                if self._active_configuration is not None and \
                        self._active_configuration != self._configurations[0]:
                    self._configurations.append(self._active_configuration)

                self._all_configurations = self._configurations
            else:
                self._log("{} is currently running - using pregenerated configuration".format(b.name))

                self._configurations = self._benchmark_configurations[b.name]["pareto"]
                self._all_configurations = self._benchmark_configurations[b.name]["all"]

    def _find_best_configuration(self, target_tps=None, last_best=None):
        if len(self._configurations) == 1:
            return self._configurations[0]

        best = last_best
        for c in self._configurations:
            if target_tps is None:
                if best is None or c.power < best.power:
                    best = c
            else:
                if best is None:
                    best = c
                elif c.tps >= target_tps:
                    if c.power < best.power:
                        best = c
                elif c.tps >= best.tps:
                    best = c

        return best

    def _apply_configuration(self, config):
        if self._active_configuration is not None and self._active_configuration == config:
            self._active_configuration = config
            return

        workers = []
        for i in range(config.cores):
            workers.append(i)
        if config.ht:
            for i in range(config.cores):
                workers.append(i + max(Hardware.config['cores']))

        frequency = config.freq

        self._log("Applying configuration: {} @{}MHz".format(pretty_print(workers), frequency/1000))

        for w in self.workers:
            w.frequency(frequency)
            if w.localid in workers:
                w.enable()
            else:
                w.disable()

        self._active_configuration = config

    # Data collecting methods
    def _pull_performance_data(self):
        self._ectrl._pull_monitoring_data()

        # Get the latest performance value
        perf_vals = self._counters["finished"].values(False)
        if len(perf_vals) > 0:
            actual_perf = perf_vals[-1].value
            estimated_perf = self._active_configuration.tps

            self._monitoring_data["performance"].append((datetime.now(), actual_perf, estimated_perf))

    def _pull_power_data(self):
        if self._rapl_counters is None:
            self._monitoring_data["power"].append((datetime.now(), 0, self._active_configuration.power))
            return

        rapl_counters = RAPLCounter()

        diff = self._rapl_counters - rapl_counters

        actual_power = diff.domain(0).counter("package-0").watts + diff.domain(0).counter("dram").watts
        estimated_power = self._active_configuration.power

        self._monitoring_data["power"].append((diff.timestamp, actual_power, estimated_power))
        self._rapl_counters = rapl_counters

    def _update_monitoring_data(self):
        if self._last_refresh is None or \
                (datetime.now()-self._last_refresh).total_seconds() * 1000 > self._refresh_time:
            self._pull_performance_data()
            self._pull_power_data()

            self._last_refresh = datetime.now()

    # Our main loop
    def run(self):
        while not self._event.is_set():
            with self._lock:
                if self._bench_changed() or self._update:
                    # We need to update - do it
                    self._update_configurations()

                    best = self._find_best_configuration()
                    self._apply_configuration(best)
                    self._update = False

                # Check if we need to adapt to a more or less power hungry configuration
                adapt, target_tps = self._need_adaptation()
                if adapt:
                    best = self._find_best_configuration(target_tps, self._active_configuration)
                    self._apply_configuration(best)

            # Wait for another update
            if not self._curses:
                time.sleep(1)
            else:
                key = self._root_win.get_user_input(timeout=1000)
                if key == Curses.Keys.RESIZE:
                    self._resize_windows()
                elif key == "q" or key == Curses.Keys.ESC:
                    break
                elif key == "c":
                    self._monitoring_data = { "power" : [], "performance" : [] }

            # Output the latest counter values
            self._update_monitoring_data()
            self._refresh()


# Main
def run(ectrl, curs):
    # Prepare ERIS
    ectrl.energy_management(False, False)       # Turn of ERIS' energy control loop (we are doing this now!)
    for w in ectrl.workers():                   # Turn on all ERIS workers
        w.enable()

    kill_event = Event()

    # Start the EUF and flask threads
    euf_thread = EUFThread(ectrl, curs, kill_event)
    flask_thread = FlaskThread(app, euf_thread)

    euf_thread.start()
    flask_thread.start()

    # Wait for the EUF thread to join
    try:
        euf_thread.join()
    except KeyboardInterrupt:
        kill_event.set()
        euf_thread.join()

    # Shutdown everything
    flask_thread.shutdown()
    flask_thread.join()

def main():
    # Parse the command line arguments
    arguments = ArgumentParser(description="EUF manager for ERIS")
    arguments.add_argument("--url", help="The url where the ERIS server can be reached (default=localhost)",
            type=str, dest="url", default="localhost")
    arguments.add_argument("--port", help="The port at which the ERIS server can be reached (default=5189)",
            type=int, dest="port", default=5189)
    arguments.add_argument("--user", help="The user that should be used to connect to ERIS (default=euf)",
            type=str, dest="user", default="euf")
    arguments.add_argument("--passwd", help="The password that should be used to connect to ERIS (default=euf)",
            type=str, dest="passwd", default="euf")
    arguments.add_argument("--nocurses", help="Disable curses output", action="store_true", default=False,
            dest="nocurses")

    parsed_args = arguments.parse_args()

    # Connect to ERIS
    try:
        if parsed_args.nocurses:
            with ErisCtrl(parsed_args.url, parsed_args.port, parsed_args.user, parsed_args.passwd) as ectrl:
                run(ectrl, None)
        else:
            with ErisCtrl(parsed_args.url, parsed_args.port, parsed_args.user, parsed_args.passwd) as ectrl, \
                 Curses() as curs:
                run(ectrl, curs)
    except ErisCtrlError:
        print("Failed to connect to ERIS!")
        sys.exit(1)

if __name__ == "__main__":
    main()
