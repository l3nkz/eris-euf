#!/usr/bin/env python3

from flask import Flask, json, request, jsonify, redirect, url_for
from werkzeug.serving import make_server
import sys
from os import listdir
from os.path import join, dirname, abspath, isdir
from threading import Thread
from argparse import ArgumentParser
import time


def add_third_party_dir(f):
    base_path = dirname(abspath(f))
    tp_dir = join(base_path, "third_party")

    for e in listdir(tp_dir):
        if isdir(join(tp_dir, e)):
            sys.path.append(join(tp_dir, e))

add_third_party_dir(__file__)
from eris import ErisCtrl, ErisCtrlError
from pareto import paretoOptimize

try:
    from eris_model import Eris
    from hardware_model import Hardware
except ImportError:
    print("Model files are missing. Abort", file=sys.stderr)
#    sys.exit(1)



# All the REST API stuff
app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return redirect(url_for("service_status"))

@app.route("/configurations", methods=["GET"])
def configurations():
    global euf_mgr

    return "TBD"

@app.route("/servicestatus", methods=["GET"])
def service_status():
    global euf_mgr

    euf_on = euf_mgr.euf()
    return jsonify({"adaptOn" : False, "eclOn" : euf_on})

@app.route("/services/<stype>/<status>", methods=["POST"])
def services(stype, status):
    global euf_mgr

    if stype == "adapton":
        pass
    elif stype == "eclon":
        if int(status) == 1:
            euf_mgr.euf_on()
        else:
            euf_mgr.euf_off()
    else:
        return '',400

    return '',200

@app.route("/benchmark/sessions")
def sessions():
    return jsonify({"managedBenchmarks" : [ { "name" : "sigmod-demo" } ]})

@app.route("/benchmark/setbenchmark/<session>/<bench>", methods=["POST"])
def set_benchmark(session, bench):
    global euf_mgr

    success = euf_mgr.set_benchmark(bench)

    return '', 200 if success else 400

@app.route("/benchmark/setprofile/<session>/<profile>", methods=["POST"])
def set_profile(session, profile):
    success = euf_mgr.set_profile(profile)

    return '', 200 if success else 400

class FlaskThread(Thread):
    def __init__(self, app, euf):
        super().__init__()

        # Create the flask server using werkzeug
        self._server = make_server("localhost", 5000, app)
        self._ctx = app.app_context()
        self._ctx.push()

        # Save the EUF thread in the global context so that we can access it from
        # inside the requests
        global euf_mgr
        euf_mgr = euf

    def run(self):
        self._server.serve_forever()

    def shutdown(self):
        self._ctx.pop()
        self._server.shutdown()


def runningBenchmark():
    return "tatp"

# All the EUF related methods
def euf_loop(ectrl):
    currentBenchmark = None
    data = []
    try:
        while True:
            time.sleep(1)
            bench = runningBenchmark()
            if bench != currentBenchmark:
                print("Creating profile for:",bench)
                rawData = []
                for freq in Hardware.config['freq']:
                    for cores in Hardware.config['cores']:
                        for ht in Hardware.config['ht']:
                            cpus = (ht+1)*cores
                            params = Eris(cpus).benchmarks(bench)
                            ipc = Hardware.IPC(ht=ht,
                                    memory_heaviness=params["memory_heaviness"](),avx_heaviness=params["avx_heaviness"](),
                                    compute_heaviness=params["compute_heaviness"](),cache_heaviness=params["cache_heaviness"](),cpus=cpus,freq=freq)
                            p_pkg = Hardware.P_PKG(memory_heaviness=params["memory_heaviness"](),
                                    IPC=ipc,freq=freq,avx_heaviness=params["avx_heaviness"](),compute_heaviness=params["compute_heaviness"](),cpus=cpus)
                            tps = (freq*1000)/(params["ipt"]()/ipc)
                            rawData.append({"freq": freq,"cpus":cpus, "ht":ht, "cores":cores,"ipc":ipc,"p_pkg": p_pkg,"tps": tps})
                data = paretoOptimize(rawData,['<p_pkg','>tps'])
                #Debug output!
                print(','.join(data[0].keys()))
                for r in data:
                    print(','.join(str(x) for x in r.values()))
                currentBenchmark = bench
    except KeyboardInterrupt:
        pass


# Main
def main():
    # Parse the command line arguments
    arguments = ArgumentParser(description="EUF manager for ERIS")
    arguments.add_argument("--url", help="The url where the ERIS server can be reached (default=localhost)",
            type=str, dest="url", default="localhost")
    arguments.add_argument("--port", help="The port at which the ERIS server can be reached (default=5189)",
            type=int, dest="port", default=5189)
    arguments.add_argument("--user", help="The user that should be used to connect to ERIS (default=euf)",
            type=str, dest="user", default="euf")
    arguments.add_argument("--passwd", help="The password that should be used to connect to ERIS (default=euf)",
            type=str, dest="passwd", default="euf")

    parsed_args = arguments.parse_args()

    # Connect to ERIS
    ectrl = ErisCtrl(parsed_args.url, parsed_args.port, parsed_args.user, parsed_args.passwd)
    try:
        ectrl._login()
    except ErisCtrlError:
        print("Failed to connect to ERIS!")
        sys.exit(1)

    # Prepare ERIS
    ectrl.energy_management(False, False)       # Turn of ERIS' energy control loop (we are doing this now!)
    for w in ectrl.workers():                   # Turn on all ERIS workers
        w.enable()

    # Start the flask thread
    flask_thread = FlaskThread(app)
    flask_thread.start()

    # Enter the EUF main loop
    euf_loop(ectrl)

    # Shutdown everything
    flask_thread.shutdown()
    flask_thread.join()

if __name__ == "__main__":
    main()
